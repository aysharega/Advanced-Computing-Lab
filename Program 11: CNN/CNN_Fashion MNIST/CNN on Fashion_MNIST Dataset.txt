#CNN on Fashion_MNIST
#Training dataset-60000, testing- 10000 28x28 grayscale images(10 classes)
#1. Load and process Fashion_MNIST
from tensorflow import keras
fashion_mnistDB = keras.datasets.fashion_mnist
(Xtrain, Ytrain),(Xtest, Ytest)=fashion_mnistDB.load_data()
print("X_train Size: ", Xtrain.shape)
print("X_test Size: ", Xtest.shape)
print("Y_train Size: ", Ytrain.shape)
print("Y_test Size: ", Ytest.shape)

import matplotlib.pyplot as plt
plt.imshow(Xtrain[250], cmap='binary')
plt.imshow(Xtrain[200], cmap='binary')
#1b. Conversion to 1 channel
Xtrain =Xtrain.reshape((60000,28,28,1))
Xtest =Xtest.reshape((10000,28,28,1))
print("New X_train Size: ", Xtrain.shape)
print("New X_test Size: ", Xtest.shape)
#1c. Normalize
Xtrain =Xtrain.astype('float32')/255
Xtest =Xtest.astype('float32')/255
#2. Create CNN layers
from keras.models import Sequential
from keras.layers import Dense, Conv2D, Flatten
cnn = keras.models.Sequential()
cnn.add(keras.layers.Conv2D(32,(3,3), activation = "relu", input_shape=Xtrain.shape[1:]))
cnn.add(keras.layers.Conv2D(64,(3,3),activation = "relu"))
cnn.add(keras.layers.MaxPool2D(2,2))
cnn.add(keras.layers.Dropout(0.25))
cnn.add(keras.layers.Flatten())
cnn.add(keras.layers.Dense(128, activation = "relu"))
cnn.add(keras.layers.Dropout(0.25))
cnn.add(keras.layers.Dense(10, activation = "softmax"))
cnn.summary()
#3. Compile and test
cnn.compile(loss="sparse_categorical_crossentropy", 
            optimizer="adam", metrics="accuracy")


es=keras.callbacks.EarlyStopping(monitor='loss',patience=10,restore_best_weights=True)
cp=keras.callbacks.ModelCheckpoint( "/content/CNN_MNIST.h5",monitor='val_loss')
cnn.fit(Xtrain,Ytrain, epochs=2, batch_size=16,callbacks=[es,cp])
test_loss, test_accuracy = cnn.evaluate (Xtest, Ytest)
print ("Test_Loss=", test_loss)
print ("Test_Accuracy=", test_accuracy)
plt.show()